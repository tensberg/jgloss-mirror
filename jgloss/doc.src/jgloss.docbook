<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY JGloss "<application>JGloss</application>">
]>

<!-- JGloss User Guide (c) 2001/2002 Michael Koch

 This file is part of JGloss.

 JGloss is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 JGloss is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with JGloss; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 $Id$ 
-->

<book lang="en">
  <bookinfo>
    <title>JGloss User Guide</title>
    <author>
      <firstname>Michael</firstname><surname>Koch</surname>
    </author>
    <edition>1.0</edition>
    <copyright><year>2001/2002</year><holder>Michael Koch</holder></copyright>
    <pubdate>2002</pubdate>
  </bookinfo>

  <chapter><title>Introduction</title>
    <sect1><title>About JGloss</title>
      <para>
        &JGloss; is an application for adding reading and translation annotations
        to words in a Japanese text document. This can be done automatically and
        manually. When a text document is first opened, words will be looked
        up in dictionary files and the first reading and translation (if any) is used to
        annotate the word. The user can then edit the annotations: choose among the
        readings and translations found in the dictionaries, enter own readings and
        translations, remove annotations and add new annotations. The document
        can be exported as plain text with annotations, HTML (with support for
        the <ulink url="http://www.w3.org/TR/ruby/">
          <citetitle>Ruby Annotation</citetitle></ulink> XHTML specification) or LaTeX.
      </para>
      <para>
        The application is designed as a translation aid for people learning Japanese.
        With some new document, you can first skim the text and change the annotations
        to match the likeliest meaning of the word. Then you can print/export the text
        with annotations and start working on the details of understanding the text
        without having to resort to a paper dictionary all the time.
      </para>
      <para>
        &JGloss; is written in Java. It should work on any computer with support
        for the Java 2 Version 1.3 platform.
      </para>
    </sect1>
    <sect1><title>Credits</title>
      <para>
        &JGloss; is written by Michael Koch (<email>tensberg@gmx.net</email>). 
        It was inspired by Jim Breen's work, particularly the 
        <ulink url="http://www.dgs.monash.edu.au/~jwb/wwwjdic.html">
          <application>WWWJDIC</application></ulink> and
        <ulink url="http://www.csse.monash.edu.au/~jwb/xjdic/"><application>XJDIC</application></ulink>.
        The kanji parser is based on 
        <ulink url="ftp://ftp.cc.monash.edu.au/pub/nihongo/www-jdict.ps.gz">ideas from the WWWJDIC</ulink>.
        The character encoding detection uses code from Yasuhiro Tonooka's 
        <application>kcc</application> (Kanji Code Converter).
        The French localization is contributed by Alexandre Beraud.
        The file chooser icons are taken from <ulink url="http://artists.kde.org">the KDE project</ulink>.
      </para>
    </sect1>
    <sect1><title>License</title>
      <para>
        &JGloss; is distributed under the terms of the 
        <ulink url="http://www.gnu.org/licenses/licenses.html#TOCGPL">GNU General Public License</ulink>.
        It comes with ABSOLUTELY NO WARRANTY. This is free software, and you are
        welcome to redistribute it under certain conditions. Read the 
        license for details.
      </para>
    </sect1>
  </chapter>

  <chapter><title>Making it work</title>
    <sect1 id="sect.whatyouneed"><title>What you need</title>
      <para>
        &JGloss; is a Java application. To run it, you will need a Java implementation that
        conforms to the Java 2 Version 1.3 specifications, <abbrev>e. g.</abbrev> Sun's
        <ulink url="http://java.sun.com/j2se/1.3/jre/">
          <application>Java Runtime Environment 1.3</application></ulink> (<acronym>JRE</acronym>).
        Make sure that you install the international version. I have not tested JGloss with
        the JRE 1.4 Beta.
      </para>
      <para>
        Your computer system should already be configured to work with Japanese text. You must
        have a Japanese font installed. Having a Japanese input method installed is not absolutely
        necessary, but very useful. As a test, if your web browser can display Japanese text, it should
        be possible to set up Java do do the same. See also <xref linkend="sect.Japanesejava">.
      </para>
      <para>
        To use &JGloss;, you will need some dictionaries.
        Currently supported dictionary formats are:
        <variablelist>
          <varlistentry>
            <term><ulink url="http://www.csse.monash.edu.au/~jwb/edict_doc.html">EDICT</ulink></term>
            <listitem>
              <para>
                EDICT dictionaries are Japanese to English word dictionaries. You can download them
                from the 
                <ulink url="http://ftp.cc.monash.edu.au/pub/nihongo/00INDEX.html#dic_fil">
                  Monash Nihongo FTP Archive</ulink>. Each dictionary also needs an index file.
                &JGloss; can use the <acronym>XJDX</acronym> index files used by
                <ulink url="http://www.csse.monash.edu.au/~jwb/xjdic/"><application>XJDIC</application>
                 </ulink> or <ulink url="http://gjiten.sourceforge.net/">
                  <application>GJiten</application></ulink>, or
                index files in its own format <acronym>JJDX</acronym>. 
                If no index file is found, it will be created automatically.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <variablelist>
          <varlistentry>
            <term><ulink url="http://ftp.cc.monash.edu.au/pub/nihongo/kanjidic_doc.html">KANJIDIC
              </ulink></term>
            <listitem>
              <para>
                KANJIDIC dictionaries store information about individual kanji, among other things
                readings and translations. You can find KANJIDIC dictionaries at the same location
                as the EDICT dictionaries.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <variablelist>
          <varlistentry>
            <term><ulink url="http://openlab.ring.gr.jp/skk/">SKK</ulink></term>
            <listitem>
              <para>
                The SKK dictionaries provide a mapping from readings to words (no translations).
                They are usually used by Japanese input methods, but &JGloss; can use them
                to look up readings for kanji words.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </sect1>

    <sect1 id="sect.running"><title>Running &JGloss;</title>
      <para>
        &JGloss; requires no installation. On a <application>Windows</application> system with
        the Java Runtime Environment installed,
        double-clicking the <filename>jgloss.jar</filename> file should start the application.
        To start &JGloss; from a shell, change to the directory which contains the 
        <acronym>JAR</acronym> file and enter <userinput>java -jar jgloss.jar</userinput>.
        JGloss has some command line options:
        <userinput>java -jar jgloss.jar [option] file ...</userinput>.
        <variablelist id="sect.options"><title>Options</title>
          <varlistentry>
            <term><option>-h</option></term>
            <term><option>--help</option></term>
            <term><option>/?</option></term>
            <listitem>
              <para>
                Shows a short help message with the list of options.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-i</option></term>
            <term><option>--createindex</option></term>
            <listitem>
              <para>
                Creates JJDX index files for the dictionary files given on the command
                line. The index files will be saved in the current
                directory. &JGloss; tries to create a JJDX index file for a dictionary file
                automatically when none is found. If this fails, for example because a normal
                user has no write permissions for the dictionary directory, you can log in
                as a privileged user (<abbrev>e. g.</abbrev> administrator or root)
                and use this option to create the index files.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-f</option></term>
            <term><option>--format</option></term>
            <listitem>
              <para>
                Prints the format of the dictionary files given on the command line.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-p</option></term>
            <term><option>--pastewindow</option></term>
            <listitem>
              <para>
                At startup a window will be opened in which you can paste text, which will then
                be imported in a new JGloss document.
                This is mainly useful with the X11 select-and-paste approach to copying text,
                which does not work with the <guimenuitem>Import Clipboard</guimenuitem> function.
                Note that in order to copy Japanese characters from 
                <application>Netscape Navigator/Communicator</application>
                or <application>Mozilla</application>, you have to run the applications in a
                Japanese locale.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>-a</option></term>
            <term><option>--annotatehtml</option></term>
            <listitem>
              <para>
                Annotate a HTML file with dictionary entries
                for Japanese words. JavaScript will be used
                to display the results in a browser. The HTML generation
                is currenty only written for <application>Mozilla</application>, 
                results with other browsers may vary.
                The parameter format is <option>-a [in [out]]</option>.
                If in or out are left out or are set to '-'
                stdin/stdout will be used.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </sect1>

    <sect1 id="sect.Japanesejava"><title>Making Java work with Japanese text</title>
      <para>
        If Japanese is set as your computer system's default language, &JGloss; should work without
        any further setup. If not, you should at least have a Japanese font installed.
        A Japanese input method, while not required, should also be installed.
        If you are using Sun's <application>Java Runtime Environment</application> for Windows, make sure
        that you have the international version installed (the smaller download only has
        English locale settings).
      </para>
      <para>
        On Windows and MacOS X systems no font configuration should be neccessary.
        The first time JGloss is run, it tries to determine which font to use for displaying Japanese
        characters. If the Java default fonts don't contain Japanese characters, it tests if one of
        the fonts <emphasis>Arial Unicode MS</emphasis>, <emphasis>MS UI Gothic</emphasis>, 
        <emphasis>MS Mincho</emphasis>, <emphasis>MS Gothic</emphasis> or
        <emphasis>Osaka</emphasis> is available and configures itself to use it.
        If none of the fonts work, no configuration is done and the default settings are kept. In this
        case Japanese characters will not display correctly.
        Read <xref linkend="sect.prefs.style"> for information on how to select fonts manually,
        or read on for information on how to change the Java default fonts.
      </para>
      <para>
        Ths following paragraphs describe how to change the Java default font settings to use
        Japanese fonts. The descriptions apply to Sun's Java Runtime, other implementations may
        differ. Following these instructions should not be neccessary on Windows and MacOS X
        Systems since a custom font can be used, but have to be used on X11 Systems (blame the
        X font handling for that).
      </para>
      <para>
        The easiest way to get Java to use Japanese fonts is to set the 
        <envar>user.language</envar> parameter to <literal>ja</literal>: start &JGloss; as
        <userinput>java -Duser.language=ja -jar jgloss.jar</userinput>. This will make
        Java read the font definition from the <filename>font.properties.ja</filename> file
        of the JVM installation, and only works if the fonts used in the file are available.
        Unfortunately, at least on my Linux box, this will not make Java use the
        Japanese input method. On <application>Unix</application> systems, a second way is to
        set the <envar>LANG</envar> environment variable to <literal>ja_JP</literal>
        in a shell and then run &JGloss; from that shell. This will also make Java recognize
        an installed Japanese input method.
      </para>
      <para>
        An alternative method, and one that allows more customization of what fonts to use,
        is to edit the <filename>font.properties</filename> files. The 
        <filename>font.properties</filename> files are stored in the <filename>lib</filename>
        folder in the install directory of the <application>Java Runtime Environment</application>.
        They contain the definition of the default fonts used in Java dialogs and input elements.
        Which of the <filename>font.properties</filename> is used depends on the locale setting of 
        the operating system, <abbrev>e. g.</abbrev> 
        if you are running in a Japanese environment, the file <filename>font.properties.ja</filename>
        will be used. If there is no matching file for the current locale, the
        <filename>font.properties</filename> file is used. This is the case for most western
        locales. The file contains no definition
        for Japanese fonts, but you can edit it and add these fonts. The easiest way to do this
        is to simply rename the file <filename>font.properties.ja</filename> to 
        <filename>font.properties</filename> (but make a backup of the original file first). You
        can also edit the file to make it use different fonts.
      </para>
      <para>
        On <application>Windows 2000</application> and <application>XP</application>, 
        the <application>JRE</application> supports
        the Japanese input method regardless of the system language settings, but you will have
        to use one of the methods mentioned above to get Java to use Japanese fonts. I had no luck
        so far in getting the JRE to use the input method under <application>Windows 98</application>.
      </para>
      <sect2><title>Java and X11 fonts</title>
        <para>
          The <filename>font.properties.ja</filename> file of the Linux version of Java is configured for
          fonts contained in the Japanese distribution of Red Hat 6.1 (and the international
          Red Hat 7.x with Japanese support installed). It seems that these fonts (wadalab-gothic.ttf
          and watanabe-mincho.ttf) are not contained in most other Linux distributions. To make matters
          worse, Java only seems to accept TrueType fonts and not the Japanese bitmap fonts commonly
          installed with X11. This means that you will either have to install the mentioned
          TrueType fonts or edit the properties file to use a different already installed
          Japanese TrueType font.
        </para>
      </sect2>
    </sect1>

    <sect1><title>Do It Yourself</title>
      <para>
        This section describes how to build &JGloss; from the sources. You do not need to read
        it if you just want to use &JGloss; and have downloaded the binary release
        (no <filename>-src</filename> ending).
      </para>
      <para>
        To build the &JGloss; JAR file, you have to have the
        <ulink url="http://java.sun.com/j2se/1.3/">
        <application>Java Development Kit 1.3</application></ulink> from Sun (or something compatible) 
        installed (I have not tested &JGloss; with the JDK 1.4 Beta). To create the
        documentation files from <filename>jgloss.docbook</filename>
        you need the DocBook 4.1 DTD and various DocBook tools. Look for them at
        the <ulink url="http://www.oasis-open.org/docbook/">OASIS site</ulink>, 
        <ulink url="http://nwalsh.com/docbook/">Norman Walsh</ulink>'s site and
        the <ulink url="http://sourceware.cygnus.com/docbook-tools/">DocBook tools page</ulink>,
        or on your favorite Linux distribution's CD-ROMs.
      </para>
      <para>
        The sources come with a <filename>Makefile</filename> which automates the build process.
        The Makefile is written for a GNU/Linux system, but should work on other systems with
        the GNU tools or equivalent commands installed. Here is an (incomplete) list of
        make targets:
        <variablelist>
          <varlistentry><term><command>jgloss</command></term>
            <listitem><para>Creates the JGloss JAR archive. This is the default make target.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><command>jgloss-www</command></term>
            <listitem>
              <para>
                Builds the JGloss-WWW servlet. The components will be placed in the
                <filename>jgloss-www</filename> directory. This is an experimental servlet
                which rewrites Japanese web pages. Words in the page are looked up in 
                the dictionaries and annotated with the lookup results. JavaScript is 
                used to display the result in the browser. You can find documentation for the servlet in
                <filename>src/www/index.html</filename>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term><command>doc</command></term>
            <listitem><para>Generates the documentation files from 
                <filename>doc.src/jgloss.docbook</filename></para>
            </listitem>
          </varlistentry>
          <varlistentry><term><command>gen-javadoc</command></term>
            <listitem><para>Generates the javadoc documentation for the JGloss source files.</para>
            </listitem>
          </varlistentry>
          <varlistentry><term><command>dist</command></term>
            <listitem><para>Creates the source and binary distribution zip and tgz files.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        If you can't use the Makefile, you can build the JGloss JAR archive by hand. Use
        <command>javac</command> to compile the <filename>*.java</filename> files in the 
        <filename>src</filename> directory. Use <command>native2ascii</command> to convert
        every <filename>.properties.in</filename> file in the <filename>src/resources</filename>
        directory to a <filename>.properties</filename> file using the <acronym>ASCII</acronym>
        charset. The native charset of the file is specified in the first line of the
        input file. Then use <command>jar</command> to build a JAR archive, using the
        <filename>MANIFEST.MF</filename> file as manifest (see <command>jar</command> options).
        Make sure that the <filename>resources</filename> and <filename>data</filename>
        directories are included in the archive.
      </para>
    </sect1>
  </chapter>

  <chapter><title>Using JGloss</title>
    <sect1><title>Quickstart</title>
      <para>
        When you start &JGloss; for the first time, you should set the dictionary files
        which you want to use. Choose the <guimenuitem>Preferences</guimenuitem> item from
        the <guimenu>Edit</guimenu> menu, and select the <guimenuitem>Dictionaries</guimenuitem>
        tab in the newly opened window. Add the dictionaries you want to use and hit
        <guibutton>OK</guibutton>. Note that dictionary entries will be chosen in the order
        of the dictionaries, so put your preferred dictionaries higher in the list.
      </para>
      <para>
        Use the <guimenuitem>Import</guimenuitem> item from the <guimenu>File</guimenu> menu
        to open the import dialog. Enter the URL of the file you want to import, or select 
        a local file by hitting the <guibutton>Choose file</guibutton> button. Once you push
        <guibutton>Import</guibutton>, the text will be parsed and annotations will be added
        by looking up words from the text in the dictionaries. After some time 
        (this can take rather long for larger texts) the annotated document will be 
        displayed in the window.
      </para>
      <figure id="figure.main" float="1"><title>JGloss Main Window</title>
        <screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="img/main.png" scale="50">
            </imageobject>
            <textobject><phrase>&JGloss; main window</phrase></textobject>
          </mediaobject></screenshot>
        <blockquote>
          <para>
            The right part of the &JGloss; window shows the 
            annotation editor (see <xref linkend="sect.annotationeditor">), which is used
            to manipulate the annotations in the document.
            The left part shows the annotated document
            (see <xref linkend="sect.docview">). An <emphasis>annotated word</emphasis> is
            highlighted in red, a <emphasis>reading annotation</emphasis> in green
            and a <emphasis>translation annotation</emphasis> in blue. The currently
            selected annotation is highlighted in deep red.
          </para>
        </blockquote>
      </figure>
      <para>
        <xref linkend="figure.main"> shows the &JGloss; window after some text is imported.
        The left part of the window shows the annotated document. An annotated word is shown
        in light red, with the reading annotation above and the translation annotation below the
        word. The right part of the window contains the annotation editor. For every annotated word,
        the word and its current reading and translation is shown. For the selected annotation
        at the top of the list, the annotation editor shows the current reading and translation, 
        the dictionary form of the entry, and
        all readings and translations found in the dictionaries. You can use the annotation editor
        to change the reading and translation of a word, either by selecting one of the listed
        entries, or by selecting the current reading/translation item and entering the new text.
      </para>
      <para>
        The heuristics used for generating the annotations are not perfect.
        For example, if you import a text using the edict dictionary file, 
        <inlinemediaobject><imageobject><imagedata fileref="img/kuru_kanji.png" scale="50">
          </imageobject><textobject><phrase>kuru (written with kanji)</phrase>
          </textobject>
        </inlinemediaobject>
        is assigned the reading
        <inlinemediaobject><imageobject><imagedata fileref="img/kitaru.png" scale="50">
          </imageobject><textobject><phrase>kitaru</phrase>
          </textobject>
        </inlinemediaobject>
        instead of 
        <inlinemediaobject><imageobject><imagedata fileref="img/kuru.png" scale="50">
          </imageobject><textobject><phrase>kuru</phrase>
          </textobject>
        </inlinemediaobject>
        and 
        <inlinemediaobject><imageobject><imagedata fileref="img/hitori_kanji.png" scale="50">
          </imageobject><textobject><phrase>hitori (written with kanji)</phrase>
          </textobject>
        </inlinemediaobject>
        is assigned the reading
        <inlinemediaobject><imageobject><imagedata fileref="img/ichinin.png" scale="50">
          </imageobject><textobject><phrase>ichinin</phrase>
          </textobject>
        </inlinemediaobject>
        instead of the more common 
        <inlinemediaobject><imageobject><imagedata fileref="img/hitori.png" scale="50">
          </imageobject><textobject><phrase>hitori</phrase>
          </textobject>
        </inlinemediaobject>
        . This happens because the application picks the first reading and translation 
        found in the dictionary. Also, the algorithm used for verb/adjective deinflection can produce
        false results. What follows is that you should not trust the automatic annotations too much
        and that the document will require some editing. 
      </para>
      <para>
        To edit an annotation, select it in the annotation editor. The annotation editor will expand
        the annotation and show the dictionary lookup result, and the annotation will be
        highlighted red in the document view. Use the down key to select an entry with the appropriate
        reading or translation and hit the space bar. This will make the selected
        entry the reading/translation of the annotation. To manually edit the text of an annotation,
        select the <guimenuitem>Reading</guimenuitem> or <guimenuitem>Translation</guimenuitem>
        item and hit space to start editing.
      </para>
      <para>
        When you have finished editing your document, you can export it to different formats.
        Select <guimenuitem>HTML</guimenuitem> from the <guisubmenu>Export</guisubmenu>
        entry in the <guimenu>File</guimenu> menu. In the file chooser you can select which type of
        annotations will be written. Select a file name and save the HTML file. If you are using
        a current version of the <application>Microsoft Internet Explorer</application>, 
        which already (more or less) supports the
        <citetitle>Ruby Annotation</citetitle> XHTML specification, the ruby will be
        rendered above the annotated word by the browser. Translations will be shown in a popup window
        if you move the mouse over a word.
      </para>
    </sect1>

    <sect1 id="sect.docview"><title>The Document View</title>
      <para>
        The left part of the window shows the annotated document. Annotated words will have a colored
        background. You can change the colors or switch them off in the 
        <link linkend="sect.prefs.general">preferences dialog</link> and toggle the display
        of reading and translation annotations in the <link linkend="sect.menu.view">View menu</link>.
        If you left-click on an annotated word, the annotation will be selected in the annotation
        editor. A right-click will select the word and pop up
        a context menu with options for this annotation (see 
        <xref linkend="sect.menu.annotation">). To look up the currently selected text in the dictionaries,
        select <guimenuitem>Word Lookup</guimenuitem>. To add an annotation, select some text
        and use <guimenuitem>Annotate Selection</guimenuitem> in the <guimenu>Edit</guimenu> menu
        (see <xref linkend="sect.menu.edit">).
      </para>
    </sect1>

    <sect1 id="sect.annotationeditor"><title>The Annotation Editor</title>
      <para>
        The annotation editor is used to edit the reading and translation annotations of annotated
        words in the document. It is displayed in the right half of the &JGloss; window
        (see <xref linkend="figure.main">). Each annotated word has an entry in the editor, ordered
        by its appearance in the document. The entries are displayed as a list, with the currently
        selected annotation expanded to show the dictionary search results.
        If an entry is selected, the annotation will be highlighted in the document view.
      </para>
      <para>
        You can use the keyboard to navigate in the editor. The <keycap>cursor up/down</keycap>
        keys will move the selection by one item. To move to the next annotation press
        <keycap>N</keycap>, to move to the previous annotation press <keycap>P</keycap>.
        Pressing <keycap>space</keycap> will do something useful, depending on what kind of item is
        currently selected. Look at the table below for the full list of keyboard commands.
        Right-clicking an entry with the mouse will show a context menu for
        the chosen item (see <xref linkend="sect.menu.annotation">).
      </para>
      <para>
        Each annotated word has one or more readings. If a word has no kanji characters,
        the reading will span the whole word. Otherwise, a reading annotation is added
        to every kanji substring of the word. The annotation editor shows the reading,
        or list of readings. To edit a reading,
        select the item and hit <keycap>space</keycap>, or click it twice and wait a moment.
        When you are done with editing, press <keycap>return</keycap>, and the document view
        will be updated with the new reading.
        The second item shows the current translation. It is edited in the same way as a
        reading.
      </para>
      <para>
        The dictionary form item shows the dictionary form of the annotated word. This form
        will be used for a user dictionary entry, the annotation list and the LaTeX export
        format. The dictionary form will be set when you select the reading from one of the
        dictionary entries. To edit it manually, hit <keycap>space</keycap> when the
        dictionary entry item is selected. This will show the word and reading part of the
        entry, which you can edit like the reading/translation items.
      </para>
      <para>
        Some text documents you can find on the net are already annotated with readings 
        by placing the reading in brackets after a word. These readings can be recognized by the
        text parser during importing and used as reading
        annotation. They are shown in the <guimenuitem>Reading from document</guimenuitem> items.
        Selecting one and hitting <keycap>space</keycap> will make it the reading of the
        annotation. If you are using a dictionary which provides readings but no translations,
        entries from this dictionary will also be displayed this way. The ChaSen parser will
        also provide readings for some words.
      </para>
      <para>
        For every dictionary in which an entry for the annotated word is found, an item
        will be generated showing the dictionary name. Under the name, for each entry the
        dictionary word and reading will be shown, and under that one item for every translation.
        If you select a reading and hit <keycap>space</keycap>, the reading will be made the new
        reading annotation, and likewise for a translation. If a dictionary entry was found
        using verb/adjective de-inflection, the item will show the dictionary form
        of the word and in brackets the grammatical form in which the word appears in the document.
        Note that this algorithm may show wrong grammatical forms and therefore this feature
        should not always be trusted.
      </para>
      <table><title>Annotation Editor Shortcut Keys</title>
        <tgroup cols=2>
          <colspec colname="key" align="center">
          <colspec colname="function" align="left" colwidth="5*">
          <thead><row><entry>Key</entry><entry>Function</entry></row></thead>
          <tbody>
            <row>
              <entry><keycap>n</keycap></entry>
              <entry>Move to the next annotation</entry>
            </row>
            <row>
              <entry><keycap>p</keycap></entry>
              <entry>Move to the previous annotation</entry>
            </row>
            <row>
              <entry><keycap>space</keycap></entry>
              <entry>Depending on selection:hide/use reading/use translation/start editing</entry>
            </row>
            <row>
              <entry><keycap>r</keycap></entry>
              <entry>Remove annotation</entry>
            </row>
            <row>
              <entry><keycap>d</keycap></entry>
              <entry>Remove annotation and duplicates</entry>
            </row>
            <row>
              <entry><keycap>e</keycap></entry>
              <entry>Add annotated word to exclusion list</entry>
            </row>
            <row>
              <entry><keycap>u</keycap></entry>
              <entry>Add annotated word to the user dictionary</entry>
            </row>
            <row>
              <entry><keycap>a</keycap></entry>
              <entry>Use the reading and translation of the annotated word for all identical words
                in the document</entry>
            </row>
            <row>
              <entry><keycap>h</keycap></entry>
              <entry>Hide/show annotation</entry>
            </row>
            <row>
              <entry><keycap>del</keycap></entry>
              <entry>Clear reading/translation annotation text (only when a reading/translation node
                is selected)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="sect.import"><title>Importing text documents</title>
      <para>
        To create a new annotated document, select <guimenuitem>Import</guimenuitem> or
        <guimenuitem>Import Clipboard</guimenuitem> from the <guimenu>File</guimenu> menu.
        <guimenuitem>Import Clipboard</guimenuitem> will create a new document from the
        content of the system clipboard, it can be configured in the 
        <link linkend="sect.prefs.general">General Preferences</link> dialog.
      </para>
      <para>
        Selecting <guimenuitem>Import</guimenuitem> will show the 
        <guilabel>Import File</guilabel> dialog. In the text field you can enter
        an HTTP URL or the file name of a local document. The document should be plain text.
        There is some support for importing <acronym>HTML</acronym> documents, but it will only work
        for simple layouts. If you hit the <guibutton>Choose File</guibutton>
        button, a file chooser dialog will pop up and let you select a local file.
        The character encoding of the file can be selected in the 
        <guilabel>Character encoding ...</guilabel> popup menu. You can usually
        leave it on the <guilabel>&lt;auto&gt;</guilabel> setting, which will make &JGloss;
        auto-detect the encoding of the file. If the auto-detection fails for a file, you can
        select the encoding manually. You can choose the text parser for the automatic annotation in
        the <guilabel>Text Parser</guilabel> part of the dialog (see <xref linkend="sect.parser">). 
        Clicking the <guibutton>Import</guibutton> button will import the selected file.
      </para>
      <para>
        If a reading is supplied for a annotated word, this reading
        will be used for the reading annotation, and the first translation found with this reading
        will be used for the translation annotation. Otherwise, the first reading and translation
        found in a dictionary will be used for the annotation. You can change the annotations later
        manually.
      </para>
      <note>
        <para>
          The &JGloss; application is quite resource intensive. It can take a rather long time
          for the newly imported document to be displayed. You should consider splitting a long text
          in several shorter files before you import it.
        </para>
      </note>
    </sect1>

    <sect1 id="sect.export"><title>Exporting annotated documents</title>
      <para>
        &JGloss; supports the exporting of annotated documents in several formats, described below.
        You can select one of the formats from the <guisubmenu>Export</guisubmenu> submenu in 
        the <guimenu>File</guimenu> menu.
      </para>
      <para>
        A common option for all formats is the character encoding of the generated file.
        What format you use depends mainly on what application you want to use the exported
        file with. Modern web browsers should support all of the encodings. For other applications,
        if you are working on Windows, you should try Shift-JIS and on Unix EUC-JP. If the document
        or your annotations contain characters not in ASCII or the Japanese character set
        (<abbrev>e. g.</abbrev> umlauts), you should use UTF-8, which takes more disk space
        but can represent all characters.
      </para>
      <para>
        With the <guilabel>write "hidden" annotations</guilabel> switch you can control how to
        treat annotations which are marked as <link linkend="sect.menu.annotation">
          <emphasis>hidden</emphasis></link> in the annotation editor. If it is unchecked,
        the annotations for hidden words will not be written to the generated document.
      </para>
      <sect2><title><acronym>HTML</acronym></title>
        <para>
          If you export the document in HTML format, the document can viewed in any web browser
          that supports display of Japanese characters. 
          The document title set in JGloss will be used as the title of the HTML document.
          The markup defined in the
          <citetitle>Ruby Annotation</citetitle> specification is used to embed the annotations,
          browsers which support it will render the annotations above/below the annotated words.
        </para>
        <para>
          If the <guilabel>backwards compatible</guilabel> switch is not selected, the generated
          HTML will use all options of the <citetitle>Ruby Annotation</citetitle> to embed
          both readings and translations. The generated document will only render correctly on
          browsers which fully support the specification (I don't know of a browser which currently
          does). Otherwise, the subset of the specification which the Internet Explorer 5.5
          understands will be used for reading annotations. Translations are shown using JavaScript
          in a floating window and the status bar of the browser when the user moves the mouse
          over an annotated word. In Netscape 6/Mozilla and other browsers
          which don't support ruby annotations but support the neccessary JavaScript functions, reading
          annotations will be shown in a floating window above the annotated word and in the status bar.
          In other browsers, the
          reading annotations will be shown in the document after the annotated word, the translations
          are not available.
        </para>
      </sect2>

      <sect2><title>Plain Text</title>
        <para>
          The plain text export function will generate a text document similar to the
          originally imported document. Annotations will be written after the annotated word,
          enclosed in brackets.
        </para>
      </sect2>

      <sect2><title>LaTeX</title>
        <para>
          The LaTeX export function will generate a text document in LaTeX format. 
          Since normal LaTeX can't handle Japanese text, you will have to use 
          <application>platex</application> to process the file. <application>platex</application>
          is an extension to LaTeX for typesetting Japanese documents, it comes as part of the
          standard TeTeX installation and may be available with other TeX implementations.
          You will also need some Japanese fonts for displaying the generated file.
          Ghostscript can supply fonts to TeX, Japanese fonts for Ghostscript are available
          at <ulink url="http://www.enel.ucalgary.ca/People/far/howto/gs-ttf.html">
            http://www.enel.ucalgary.ca/People/far/howto/gs-ttf.html</ulink>. 
          <application>dvips</application> will also have to be configured to know about the Japanese
          fonts if you want to convert the generated dvi file to Postscript.
          The exported document uses the ruby macro <filename>ruby-annotation.sty</filename>
          for reading annotations.
          You can find it in the <filename>latex-ruby</filename> folder of &JGloss;.
          The document title set in JGloss will be used as page header.
        </para>
        <para>
          If you select the <guilabel>Place translation on same page as word</guilabel> option,
          translation annotations will be generated as footnotes on the page on which the word appears.
          Otherwise, the list of translations will be placed at the end of the document.
        </para>
      </sect2>

      <sect2><title>Annotation List</title>
        <para>
          The annotation list export function will write a text file listing all annotations
          in the document. The dictionary form and the selected translation of the annotated 
          word is used. Annotations will only be written once, duplicate entries will be
          skipped. You can use the generated text as a basis for a vocabulary list.
        </para>
      </sect2>
    </sect1>

    <sect1 id="sect.userdict"><title>The User Dictionary</title>
      <para>
        The user dictionary is a special dictionary to which you can add words from within the
        annotation editor. The user dictionary will always be shown in the list of dictionaries
        and cannot be deleted. You can use the user dictionary to add words which don't appear in any
        of the other dictionaries. Another use of the user dictionary is the selection of
        a preferred reading/translation for a word with several readings/translations. Since
        during a import the first reading/translation found for a word is choosen and the
        user dictionary is first in the list, entries in the user dictionary will be
        preferred.
      </para>
      <para>
        To add an entry to the user dictionary, select an annotation
        in the annotation editor and choose <guimenuitem>Add to Dictionary</guimenuitem>
        from the <guimenu>Annotation</guimenu> menu. The dictionary form and current translation
        will be used for the new entry. There currently is no way to delete
        or edit an entry from within JGloss, but you can edit the dictionary file.
        The dictionary is saved in EDICT format to the file
        <filename>.jgloss-userdictionary</filename> in the user's home directory.
      </para>
    </sect1>

    <sect1 id="sect.wordlookup"><title>The Word Lookup Dialog</title>
      <para>
        You can look up words in the dictionaries from the word lookup dialog. Enter a Japanese
        or English word in the <guilabel>Enter Expression</guilabel> text field and hit the
        <guibutton>Search</guibutton> button. The results will be displayed in the lower area
        of the dialog window. The part of the entry which matched the expression will be
        highlighted blue for each result line.
        Hitting the <guibutton>Clear</guibutton> will delete the current search
        expression. If you select the arrow to the right of the text field, a popup menu listing
        previous search expressions will be shown.
      </para>
      <para>
        You can select the search mode from the <guilabel>Search Options</guilabel> part of the
        dialog. <guilabel>Exact matches</guilabel> will only return entries where the entered
        expression is identical to the word, reading or one of the translations of the entry. 
        <guilabel>Starts with Expression</guilabel> and <guilabel>Ends with Expression</guilabel>
        will find entries where the word, reading or one of the translations have the search
        expression at the beginning/end. <guilabel>Any Match</guilabel> will return entries where the
        search expression appears anywhere within the result. Note that the dictionary formats may not
        support all of the search options. For example, the EDICT implementation does not do "ends with"
        searches for readings so you might not get all possible matches if you use this search mode.
      </para>
      <para>
        The <guibutton>Use Deinflection</guibutton> checkbox enables the use of the verb/adjective
        deinflection algorithm for the search expression. This might find entries for inflected
        word forms, but may also yield confusing results.
      </para>
      <para>
        You can limit the search to a single dictionary by selecting the 
        <guibutton>Search Dictionary</guibutton> radio button and selecting the dictionary from
        the popup menu to the right. If the <guibutton>Search all Dictionaries</guibutton> radio
        button is selected, all dictionaries made available to JGloss in the preferences will
        be searched.
      </para>
    </sect1>

    <sect1 id="sect.parser"><title>Text Parser selection</title>
      <para>
        JGloss can use two different parsers for the automatic annotation of Japanese text, the
        Kanji parser and the ChaSen parser. Select the parser by clicking the respective radio
        button. The ChaSen parser will only be available if the chasen program is installed 
        (see below).
      </para>
      <para>
        If the <guilabel>annotate first occurrence</guilabel> option is selected, each word in a
        document is only annotated the first time it appears. This decreases the RAM usage and
        the time it takes to display the document.
      </para>
      <para>
        Some documents you can find on the internet
        already have reading annotations added to kanji words in the form of some hiragana
        enclosed in brackets after the kanji word. The parsers can generate
        reading annotation entries for these words. You can select the brackets used in the document
        for reading annotations with the <guilabel>Brackets used...</guilabel> box. If the document
        contains no reading annotations, you can select <guilabel>none</guilabel> or 
        simply ignore this setting.
      </para>
      <sect2><title>The Kanji parser</title>
        <para>
          The Kanji parser is built into JGloss. A simple heuristic is used for choosing words to annotate:
          for a sequence of katakana characters, the whole sequence is treated as one word and
          looked up. For a sequence of kanji characters followed by hiragana characters, the
          algorithm first looks for possible inflected forms in the hiragana string and will
          try to find words that consist of the kanji word and the dictionary form of the inflected
          forms that appear in the hiragana string. If no match is found, only the kanji part
          is looked up. If still no match is found in any of the dictionaries, prefixes of the
          kanji word will be tried and if this leads to a match the process will be repeated with
          the remainder. A consequence of this method is that hiragana words will never be annotated
          automatically even if they are in the dictionaries.
        </para>
      </sect2>
      <sect2><title>The ChaSen parser</title>
        <para>
          The ChaSen parser uses the ChaSen morphological analysis program to decompose Japanese
          text in words and to derive the base form of inflected words.
          It is slower than the Kanji parser, but will annotate hiragana words as
          well as kanji and katakana words. It also does a better job of deinflecting verbs and
          adjectives. You can download ChaSen
          from <ulink url="http://chasen.aist-nara.ac.jp/">the ChaSen homepage</ulink>.
          After installation, you have to set the path to the chasen executable in the 
          <link linkend="sect.prefs.general">preferences dialog</link>. It usually is
          <filename>/usr/local/bin/chasen</filename> under Unix or 
          <filename>c:\Program Files\chasen21\chasen.exe</filename> under Windows.
        </para>
        <para>
          The ChaSen program is used to generate a list of words with their reading and base form from
          the parsed text. The words will be looked up in the dictionaries, and if an entry is
          found, an annotation will be generated. If no dictionary entry is found and the word
          is not inflected, kanji substrings will be tried. A reading annotation with the reading
          output by ChaSen is also added if the reading returned by ChaSen is different from the first
          reading found in the dictionaries. Since the ChaSen program uses its own set of dictionaries
          to detect words, it might not recognize words which are found in the dictionaries used by JGloss
          but not in the ChaSen dictionaries.
        </para>
        <note>
          <para>
            On Windows systems, an empty console window is visible while ChaSen is running, unless
            JGloss is started from the command line. Under Windows 98/ME, the ChaSen program does not
            terminate automatically. You will have to close the ChaSen window manually after the text
            is parsed.
          </para>
        </note>
      </sect2>
    </sect1>

    <sect1 id="sect.preferences"><title>The Preferences Dialog</title>
      <para>
        The preferences dialog contains four panels, one with general preferences,
        one for setting the visual appearance
        of the annotated document, one for managing the dictionaries and one for editing the list 
        of words excluded from annotation.
        You can access the dialog by selecting <guimenuitem>Preferences</guimenuitem>
        from the <guimenu>Edit</guimenu> menu.
      </para>
      <sect2 id="sect.prefs.general"><title>General</title>
        <para>
          You can select the window opened on startup with the 
          <guilabel>Open empty JGloss document</guilabel> and 
          <guilabel>Open Word Lookup dialog</guilabel> radio buttons.
          The function of the left mouse button is changed in the <guilabel>Left-clicking an
            annotated word</guilabel> section of the dialog. If you select <guilabel>Show annotation
            tooltip</guilabel>, a popup window with the annotation text will be shown if you
          click on a word. Otherwise, the annotation will be selected in the annotation editor.
          The text parser used when importing the clipboard content can be selected in the 
          <guilabel>Import Clipboard Parser</guilabel> section of the dialog. See 
          <xref linkend="sect.parser"> for details. You can set the location of the
          ChaSen parser program in the <guilabel>ChaSen executable</guilabel> text field.
          It usually is <filename>/usr/local/bin/chasen</filename> under Unix or 
          <filename>c:\Program Files\chasen21\chasen.exe</filename> under Windows.
          If the program cannot be found, the ChaSen parser will not be available.
        </para>
        <!-- Enable direct editing is now a hidden feature because of its bugs and potential danger
        <para>
          If you select the <guilabel>Enable direct editing</guilabel> checkbox, you can
          edit the text in the document view like you would in a text editor. Unfortunately
          this function does not work very well and you should save the document before enabling
          it. Problems include positioning the cursor, no actualization of the annotation
          editor for changed annotations and problems if you delete an annotation by removing
          all characters from it. An alternative to this is to edit the saved &JGloss;
          document, either as source in a normal text editor or by loading it into an HTML
          editor.
        </para>
        -->
      </sect2>
      <sect2 id="sect.prefs.style"><title>Style</title>
        <para>
          The <guilabel>Japanese User Interface Font</guilabel> lets you choose the font used
          in the display elements of JGloss. If the default Java fonts don't contain Japanese
          characters or you want to use a different font, select the
          <guilabel>Use this font</guilabel> radio button and choose a font from the list.
          Note that not all fonts in the list can display Japanese characters.
        </para>
        <para>
          The other font selection options determine the fonts used in the document view.
          Select a font by using the popup menu. The font size can be selected from the
          popup menu to the right, or you can enter the font size manually if it is not in
          the list. You can select a different background color by clicking on the button
          with the color label, or disable the use of a background color by unchecking the
          <guilabel>set background color</guilabel> checkbox. The 
          <guilabel>Highlight color ...</guilabel> button lets you select the color
          which is used for highlighting the currently selected annotation in the document view.
        </para>
      </sect2>
      <sect2 id="sect.prefs.dictionaries"><title>Dictionaries</title>
        <para>
          In this dialog you can set the dictionaries which are used when importing a text
          or adding annotations to a document manually. Click on 
          <guibutton>Add dictionary file</guibutton> to add one or more dictionaries to
          the list. &JGloss; currently supports dictionaries in EDICT, KANJIDIC and SKK format. 
          Select a dictionary from
          the list and click <guibutton>Remove entry</guibutton> to remove it.
        </para>
        <para>
          Since the automatic annotation process will search the dictionaries in the order
          in which they are displayed in the list and will use the first entry found as default annotation, 
          you should put your preferred dictionary in the front. Select one of the dictionaries
          and click <guibutton>Move entry up</guibutton> or <guibutton>Move entry down</guibutton>
          do move it to the desired position.
        </para>
      </sect2>
      <sect2 id="sect.prefs.exclusions"><title>Exclusions</title>
        <para>
          This dialog lets you manage the list of words excluded from automatic annotation.
          When you import a document, no annotations will be added for the words in
          this list. You can export and import the list by using the correspondent buttons.
          The format of the list is simply one word per line.
        </para>
      </sect2>
    </sect1>

    <sect1><title>JGloss menus</title>

      <sect2><title>File</title>
        <variablelist>
          <varlistentry><term>Import</term>
            <listitem>
              <para>
                Creates a new document by importing a text file, annotating it on
                the fly. See <xref linkend="sect.import"> for details.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Import Clipboard</term>
            <listitem>
              <para>
                Creates a new document by importing the content of the clipboard.
                See <xref linkend="sect.import"> for details.
                This item will only be enabled if the clipboard currently contains some
                text.
              </para>
              <note>
                <para>
                  On <application>Linux</application> I have so far been unable to get Java
                  to properly interact with the X clipboard and let me import the text copied
                  in another application. Use the <option>-p</option> command line option
                  instead (see <xref linkend="sect.running">).
                </para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry><term>Open</term>
            <listitem>
              <para>
                Open a &JGloss; annotated document.
              </para>
              <note>
                <para>
                  The application can take rather long to display a document for the first time
                  after it is loaded, especially for larger documents.
                </para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry><term>Open Recent</term>
            <listitem>
              <para>
                Open a &JGloss; annotated document by selecting it from the list of recently
                opened files.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Save</term>
            <listitem>
              <para>
                Saves the current annotated document in the &JGloss; file format. If the file name
                has not yet been determined, a file chooser dialog will be shown.
              </para>
              <note>
                <para>
                  The &JGloss; file format is basically HTML with a few custom tags. You can open
                  the file in a HTML editor to edit the text of the document, but be careful and 
                  don't change any of the special tags and attributes.
                </para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry><term>Save As</term>
            <listitem>
              <para>
                Saves the current document in the &JGloss; file format under a new name.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Export</term>
            <listitem>
              <para>
                The entries in this submenu let you export the current annotated document in several
                formats. See <xref linkend="sect.export"> for details.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Print</term>
            <listitem>
              <para>
                Print the annotated document. The current settings for font sizes and colors
                will be used in the printed document. On Linux you can also use this option to generate 
                a Postscript version of the document by selecting the print to file option in
                the print dialog. If you want to generate a Postscript file on Windows, you have
                to install a Postscript printer driver and use the print to file option of this
                driver.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Close</term>
            <listitem>
              <para>
                Closes the document window. If the document has unsaved changes, a warning dialog
                will be shown. If all document windows and the word lookup dialog are closed,
                the &JGloss; application will quit.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="sect.menu.edit"><title>Edit</title>
        <variablelist>
          <varlistentry><term>Cut/Copy/Paste</term>
            <listitem>
              <para>
                These have the standard functionality. Note that because the document view
                is not editable, the <guimenuitem>Cut</guimenuitem> and <guimenuitem>Paste</guimenuitem>
                items are always disabled.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Find</term>
            <listitem>
              <para>
                Search for some text in the document. The search will always start at the beginning
                of the document. If the text found is part of an annotation, the annotation will be
                selected.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Find Again</term>
            <listitem>
              <para>
                Searches for the next occurrence of the text from the last search. The search will
                start at the position where the last occurrence was found.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Annotate Selection</term>
            <listitem>
              <para>
                This will let you annotate to the currently selected text.
                The <link linkend="sect.wordlookup">Word Lookup dialog</link> will be opened
                and shows the selected word. You can edit the word and search it in the dictionaries.
                If you click the <guibutton>Annotate</guibutton> button, the word in the document
                will be annotated with the current search result. Click
                <guibutton>Cancel</guibutton> to not annotate the word.
              </para>
              <para>
                Annotations cannot overlap. If the selected text already contains annotations,
                these annotations will be deleted. Also, an annotation cannot span paragraphs.
                If text from more than one paragraph is selected, the annotation will end at
                the end of the first paragraph.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Document Title</term>
            <listitem>
              <para>
                Brings up a dialog which lets you set the title of the document. The title
                is used when the document is exported in HTML or LaTeX format.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Word Lookup</term>
            <listitem>
              <para>
                Selecting this item will show the Word Lookup dialog (see 
                <xref linkend="sect.wordlookup">). If some text is selected in the current
                document, this text will be automatically searched using the current dialog 
                settings.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Preferences</term>
            <listitem>
              <para>
                Selecting this item will show the preferences dialog (see 
                <xref linkend="sect.preferences">).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="sect.menu.view"><title>View</title>
        <variablelist>
          <varlistentry><term>Compact View</term>
            <listitem>
              <para>
                Enabling compact view will make each annotation take only as much
                space in the display as the annotated word needs, with the annotation text overlapping
                the surrounding text. This may look nicer, but will cause long 
                annotations to overlap each other. You should try this with the display of
                translation annotations switched off.
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry><term>Show Readings</term>
            <listitem>
              <para>
                This item toggles the display of reading annotations in the document view.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Show Translations</term>
            <listitem>
              <para>
                This item toggles the display of translation annotations in the document view.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Show Annotation Tooltips</term>
            <listitem>
              <para>
                If this item is selected, a window will pop up if you move the mouse over an
                annotation in the document view, showing all dictionary entries of this annotation.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="sect.menu.annotation"><title>Annotation</title>
        <para>
          The items in this entry manipulate the annotations of the entry currently
          selected in the annotation editor. The items also appear in the context
          menu for annotation editor items and annotated words in the document view.
        </para>
        <variablelist>
          <varlistentry><term>Use this Reading</term>
            <listitem>
              <para>
                Makes the currently selected item the reading of the annotation. The menu entry
                is only selectable if the item is a reading item or a dictionary entry word/reading item.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Use this Translation</term>
            <listitem>
              <para>
                Makes the currently selected item the translation of the annotation. The menu
                entry is only selectable if the item is a dictionary entry translation item.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Hide Annotation</term>
            <listitem>
              <para>
                Toggles the visibility of the reading and translation of this annotation.
                If an annotation is hidden, the document view will only display the word,
                but not the reading and annotation. This also influences how this annotation
                is treated when the document is exported (see <xref linkend="sect.export">).
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Remove Annotation</term>
            <listitem>
              <para>
                Removes the annotation from the currently selected word. It will
                be removed from the annotation editor, and the word will be changed to
                normal text in the document view.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Remove Anno. & Duplicates</term>
            <listitem>
              <para>
                Removes the annotation from the currently selected word, and all duplicate
                annotations. An annotation is a duplicate if it has the same word, reading
                and translation as the selected entry. 
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Use for All</term>
            <listitem>
              <para>
                Changes all annotations with an annotated word identical to the currently
                selected word to use the same reading, translation and dictionary form.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Add to Exclusions</term>
            <listitem>
              <para>
                Adds the word of the currently selected annotation to the list of
                words excluded from automatic annotation (see <xref linkend="sect.prefs.exclusions">).
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Add to Dictionary</term>
            <listitem>
              <para>
                Adds the word of the currently selected annotation to the user dictionary
                (see <xref linkend="sect.userdict">).
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Hide all Duplicates</term>
            <listitem>
              <para>
                This will hide all annotations which are duplicates of a previous
                annotation. An annotation is a duplicate if it has the same word, reading
                and translation as a previous entry. Note that if an annotation is edited,
                duplicate annotations will not be changed. This command will work on
                all annotations, not just the currently selected item.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry><term>Show all Annotations</term>
            <listitem>
              <para>
                This item will remove the hidden status from all annotations.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>

  </chapter>

  <chapter><title>Links</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
            The <ulink url="http://jgloss.sourceforge.net/">&JGloss; Homepage</ulink>.
            Here you can find information about JGloss and download the latest release.
          </para>
        </listitem>
        <listitem>
          <para>
            The <ulink url="http://sourceforge.net/projects/jgloss/">&JGloss; project page</ulink>
            at <ulink url="http://sourceforge.net/">SourceForge</ulink> has information about
            JGloss development.
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="http://www.dgs.monash.edu.au/~jwb/Japanese.html">Jim Breen's Japanese Page</ulink>.
            Here you will find lots of interesting links, among them links to dictionaries
            in EDICT and KANJIDIC format.
          </para>
        </listitem>
        <listitem>
          <para>
            A direct link to the 
            <ulink url="http://ftp.cc.monash.edu.au/pub/nihongo/00INDEX.html#dic_fil">EDICT 
              and KANJIDIC dictionaries</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            The <ulink url="http://chasen.aist-nara.ac.jp/">ChaSen</ulink> morphological analysis
            tool.
          </para>
        </listitem>
        <listitem>
          <para>
            The <ulink url="http://www.aozora.gr.jp/">Blue Sky Collection</ulink> of electronic books.
          </para>
        </listitem>
        <listitem>
          <para>
            Sun's <ulink url="http://java.sun.com/j2se/">Java download page</ulink>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </chapter>
</book>
