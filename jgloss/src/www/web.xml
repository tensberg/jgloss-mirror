<!DOCTYPE web-app 
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN" 
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">

<web-app>
<!-- (c) 2001 Michael Koch (tensberg@gmx.net)
 Example deployment descriptor for use with the jgloss.www.JGlossServlet.

 $Id$ 
-->

    <display-name>JGloss-WWW</display-name>
    <description>
      Rewriting proxy which annotates Japanese web pages with readings
      and translations.
    </description>

    <servlet>
      <servlet-name>jgloss-www</servlet-name>
      <servlet-class>jgloss.www.JGlossServlet</servlet-class>

      <init-param>
        <param-name>dictionaries</param-name>
        <param-value>
        /usr/share/edict/edict:
        /usr/share/edict/compverb:
        /usr/share/edict/4jwords:
        /usr/share/edict/enamdict:
        /usr/share/edict/j_places:
        /usr/share/edict/kanjidic
        </param-value>
        <description>
            List of dictionaries used by the servlets. The initialization of the
            servlet will fail if one of the dictionaries can't be opened. The separator
            character is the platform-dependent path separator (':' for Unix, ';' for Windows).
        </description>
      </init-param>

      <init-param>
        <param-name>allowed_protocols</param-name>
        <param-value>http:ftp</param-value>
        <description>
            List of protocols which are allowed in the URLs which the user specifies. Be careful
            with what you allow. If you allow "file", the user can access all files on the webserver
            to which the servlet has read access. If the user
            specifies a protocol which is not allowed by this configuration parameter, the
            servlet will send an error page. The separator character is a ':'.
        </description>
      </init-param>

      <init-param>
        <param-name>rewritten_types</param-name>
        <param-value>text/html:text/xhtml</param-value>
        <description>
           List of MIME types which will be rewritten.
        </description>
      </init-param>

      <init-param>
        <param-name>enable_cookie_forwarding</param-name>
        <param-value>true</param-value>
        <description>
            If this is set to 'true', the servlet will forward cookies received
            from the remote web server to the client and vice-versa. Since the 
            PATH value of the cookie has to be changed by the servlet,
            this only works with cookies set by http response headers, not with cookies
            set with JavaScript in the client browser.
            In addition to this parameter, cookie forwarding will also have to be enabled
            on a per-request basis by setting the query parameter jgforwardcookies to 'true'.
            This allows privacy/security-conscious users to disable the feature.
        </description>
      </init-param>

      <init-param>
        <param-name>enable_secure-to-insecure_cookie_forwarding</param-name>
        <param-value>true</param-value>
        <description>
            If this (and enable_cookie_forwarding) is set to 'true', cookies will be forwarded
            from client to server even if the client-servlet connection is https but the
            servlet-remote server connection is not; and from server to client if the 
            remote server-servlet connection is https but the servlet-client connection is not.
            Regardless of the setting of this parameter, a cookie is never forwarded by the 
            servlet over a non-https connection if the 'secure' attribute of the cookie is set.
        </description>
      </init-param>
    
      <init-param>
        <param-name>enable_form_data_forwarding</param-name>
        <param-value>true</param-value>
        <description>
            If this is set to 'true', the servlet will forward form data which the user
            enters in a servlet-rewritten HTML form through JGloss-WWW, such that the
            form response will be annotated. If this is not enabled, the form data will be sent
            directly to the originating server.
            In addition to this parameter, form data forwarding will also have to be enabled
            on a per-request basis by setting the query parameter jgforwardforms to 'true'.
            This allows privacy/security-conscious users to disable the feature.
        </description>
      </init-param>

      <init-param>
        <param-name>enable_secure-to-insecure_form_data_forwarding</param-name>
        <param-value>true</param-value>
        <description>
            If this (and enable_form_data_forwarding) is set to 'true', form data will be forwarded
            from client to server even if the client-servlet connection is https but the
            servlet-remote server connection is not. This applies to both GET url parameters
            and POST method bodies.
        </description>
      </init-param>

      <init-param>
        <param-name>response-buffer-size</param-name>
        <param-value>1024</param-value>
        <description>
            Size in bytes of the response buffer. Set this to a low value if the servlet
            accesses the remote servers through a slow connection to increase response time.
        </description>
      </init-param>
    </servlet>

    <servlet-mapping>
       <servlet-name>jgloss-www</servlet-name>
       <url-pattern>/jgloss-www/*</url-pattern>
    </servlet-mapping>      
</web-app>
