<!-- start of JGloss embedded file -->
<!--
Written by Michael Koch (tensberg@gmx.net)

Original character encoding: UTF-8

The content of this file (everything between
- start of JGloss embedded file - and - end of JGloss embedded file -) is embedded
in the HTML document when a JGloss document is exported via the HTMLExporter.

The content of this data file is public domain and comes with no warranties. Do with it
whatever you want.

$Id$
-->

<STYLE type="text/css">
<!--
ruby, rbc, rtc, rb, rt { display: inline; }
rt.re { ruby-position: before; }
rt.tr { ruby-position: after; }
div.popup { display: none; position: absolute; left: 0px; top: 0px; 
            font-size: 70%; background-color: yellow; }
//-->
</STYLE>

<SCRIPT language="javascript">
<!--

var show_reading_popup = false;
var reading_popup;
var reading_popup_text;
var translation_popup;
var translation_popup_text;

function setupDoc() {
    // Recent versions of the Internet Explorer interpret the ruby element and
    // can display the reading as ruby.
    show_reading_popup = (navigator.userAgent.search(/MSIE/) == -1);
    if (show_reading_popup && document.getElementsByTagName) {
        // hide the reading annotations on browsers which don't support ruby, but support the
        // neccessary JavaScript functions
        var ruby = document.getElementsByTagName( "ruby");
        if (ruby.length != 0) {
            for ( i=0; i<ruby.length; i++) {
                ruby[i].removeChild( ruby[i].childNodes[3]);
                ruby[i].removeChild( ruby[i].childNodes[2]);
                ruby[i].removeChild( ruby[i].childNodes[1]);
            }
        }
        else {
            // browser throws away unknown ruby tags, use span tags
            ruby = document.getElementsByTagName( "span");
            for ( i=0; i<ruby.length; i++) {
                if (ruby[i].className=="an") {
                    // Children of ruby[i] are text nodes. Each span element can contain
                    // several ruby elements and plain text, which were flattened by the
                    // browser.
                    for ( j=0; j<ruby[i].childNodes.length; j++) {
                        if (ruby[i].childNodes[j].nodeValue == "ã€Š") { // reading annotation
                            ruby[i].removeChild( ruby[i].childNodes[j]); // opening bracket
                            ruby[i].removeChild( ruby[i].childNodes[j]); // reading
                            ruby[i].removeChild( ruby[i].childNodes[j]); // closing bracket
                        }
                    }
                }
            }
        }
    }
}

function sp( el, reading, translation) {
    if (el.style)
        el.style.color = "blue";

    if (document.getElementById) {
        if (!reading_popup) {
            reading_popup = document.getElementById( "reading-popup");
            if (reading_popup) {
                for ( j=0; j<reading_popup.childNodes.length; j++) {
                    reading_popup_text = reading_popup.childNodes[j];
                    if (reading_popup_text.nodeType == 3)
                        break;
                }
            }
        }
        if (!translation_popup) {
            translation_popup = document.getElementById( "translation-popup");
            if (translation_popup) {
                for ( j=0; j<translation_popup.childNodes.length; j++) {
                    translation_popup_text = translation_popup.childNodes[j];
                    if (translation_popup_text.nodeType == 3)
                        break;
                }
            }
        }

        // show floating window with annotation
        // calculate position of element
        var posX = 0;
        var posY = 0;
        var width = el.offsetWidth;
        var height = el.offsetHeight;
        var e = el;
        while (e!=null && el!=window.document) {
            posX += e.offsetLeft;
            posY += e.offsetTop;
            e = e.offsetParent;
        }
        
        if (show_reading_popup && reading.length>0 && reading_popup && reading_popup.style) {
            // simply setting the nodeValue of reading_popup_text does not work for konqueror
            reading_popup_text.nodeValue = reading;
            reading_popup.style.left = posX;
            reading_popup.style.top = posY - el.offsetHeight*0.7; // font-size of reading is 70%
            reading_popup.style.display = "inline";
        }
        if (translation.length>0 && translation_popup && translation_popup.style) {
            translation_popup_text.nodeValue = translation;
            translation_popup.style.left = posX;
            translation_popup.style.top = posY + el.offsetHeight + 2;
            translation_popup.style.display = "inline";
        }

        var status = "";
        if (show_reading_popup && reading.length>0)
            status += reading + " ";
        status += translation
        window.status = status;
    }
}

function hp( el) {
    if (el.style)
        el.style.color = el.parentNode.style.color;

    // hide popup
    if (reading_popup && reading_popup.style) {
        reading_popup.style.display = "none";
    }
    if (translation_popup && translation_popup.style) {
        translation_popup.style.display = "none";
    }
}

//-->
</SCRIPT>


<!-- end of JGloss embedded file -->
